<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--
        Bean的配置元数据
        ①.id/name: bean的唯一标识(The unique identifier for a bean. A bean id may not be used more than once
	       within the same <beans> element.)
        ②.class: 实现bean的类路径
        ③.prototype: 作用域
           a.singleton(默认): 单例模式,每次返回的bean实例相同,相同与全局对象(容器创建时bean已存在)
           b.prototype: 每次返回一个新的bean实例,相当于每次new一个对象(获取bean时才会创建这个实例)
        ④.life cycle: 生命周期
           a.init-method: bean初始化时被调用(singleton单例：容器创建时初始化,prototype默认getBean时初始化)
           b.destroy-method: bean销毁时被调用
        ⑤.abstract: 定义为抽象bean,不能实例化,一般用于模板
    -->
    <bean id="helloWorld" class="demo.spring.test.HelloWorld" init-method="init" destroy-method="destroy"
        parent="templateBean">
        <property name="message" value="Hello World And You"></property>
    </bean>

    <bean id="helloWorld1" class="demo.spring.test.HelloWorld" scope="prototype" init-method="init" destroy-method="destroy">
        <property name="message" value="Second Hello"></property>
    </bean>

    <bean id="templateBean" class="demo.spring.test.TemplateBean" abstract="true">
        <property name="message1" value="Template Message1"/>
        <property name="message2" value="Template Message2"/>
        <property name="message3" value="Template Message3"/>
    </bean>

    <!--
        依赖注入：优先使用构造函数初始化bean,后续进行设值函数的依赖注入
        ①.基于构造函数的依赖注入：constructor-arg标签ref属性注入依赖bean
        ②.基于设值函数setXxx的依赖注入：property标签中ref属性注入依赖bean
        注入集合
    -->
    <bean id="dependenceTestBean" class="demo.spring.test.DependenceTestBean">
        <constructor-arg ref="helloWorld"></constructor-arg>
        <property name="helloWorld" ref="helloWorld"></property>
        <property name="studentList">
            <list>
                <value>Lisa</value>
                <value>Leo</value>
                <value>Lucy</value>
            </list>
        </property>
    </bean>

</beans>
